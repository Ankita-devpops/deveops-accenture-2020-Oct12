    1  apt-get update; apt-get install git -y
    2  git clone https://github.com/Ankita-devpops/deveops-accenture-2020-Oct12.git
    3  ls 
    4  cd deveops-accenture-2020-Oct12/
    5  echo "Hello World" > Hello.txt
    6  git status
    7  git add Hello.txt
    8  git status
    9  git commit -m "My 1st File - Hello.txt"
   10  git status
   11  git log
   12  git push
   13  vagrant.exe status
   14  cd..
   15  cd ..
   16  ls 
   17  apt-get update; apt-get install git -y
   18  cd
   19  ls
   20  cd deveops-accenture-2020-Oct12/
   21  ls 
   22  clear
   23  git config --global user.name "Ankita Gupta"
   24  git config --global user.email "ankita.a.r.gupta@accenture.com"
   25  git config --list
   26  echo "Apple pie" | git hash-object --stdin
   27  echo "Apple pie" | git hash-object --stdin -w
   28  ls -ltr
   29  ls -a
   30  ls -ltr .git/objects
   31  ls -ltr .git/objects/26
   32  git cat-file 26a556185940d65c99e7b8f2bc60e34f1704face -t
   33  git cat-file 26a556185940d65c99e7b8f2bc60e34f1704face -p
   34  ech "Bannana Shake" | git hash-object --stdin -w
   35  echo "Bannana Shake" | git hash-object --stdin -w
   36  git cat-file 
   37  echo "Bannana Shake" | git hash-object --stdin -w
   38  git cat-file f10d03c5ab66794c28c07e582527bebee8ed2d7f -p
   39  git log
   40  clear
   41  echo "hello again" > Hello.txt
   42  git add Hello.txt ; git commit -m "Updated file - Hello.txt" ; git push
   43  clear
   44  git log
   45  git diff e46987.. b68f8
   46  ls
   47  clear
   48  mkdir Hello_World
   49  echo "Created directory" > Hello_World/Hello_World.txt
   50  ls
   51  cd Hello_World/
   52  ls
   53  cat Hello_World.txt 
   54* 
   55  cd ..
   56  git add . ;git comit -m "New Directory" 
   57  git add . ;git commit -m "New Directory" 
   58  git log
   59  git diff HEAD~1
   60  git diff HEAD~2
   61  git diff HEAD~2..HEAD~3
   62  git diff HEAD
   63  git show HEAD
   64  git log
   65  clear
   66  git push
   67  git status
   68  git log
   69  git status
   70  git push
   71  clear
   72  mv Hello_World HElloWorld
   73  ls
   74  rm -rf Hello.txt
   75  git staus
   76  git status
   77  git add .
   78  git status
   79  git commit -m "revoking file"
   80  ls
   81  git checkout
   82  git status
   83  ls
   84  git checkout --Hard HEAD~1
   85  git checkout --hard HEAD~1
   86  git reset --hard HEAD~1
   87  git status
   88  ls
   89  mv Hello_World HelloWorld
   90  git status
   91  git add . ; git commit -m "Undo with hard reset"
   92  ls
   93  mkdir temp
   94  for i {01..10} ; do echo "Hello Temp $i" > temp/temp.txt;done
   95  tree
   96  apt-get install tree -ty
   97  tree
   98  apt-get install tree ty
   99  tree
  100  clear
  101  git status
  102  ls
  103  apt-get install tree -y
  104  tree
  105  tree temp/
  106  cd temp
  107  ls
  108  ls -ltr
  109  cd ..
  110  for i in {01..10} ; do echo "Hello Temp $i" > temp/temp.txt;done
  111  tree
  112  for i in {01..10} ; do echo "Hello Temp_$i.txt" > temp/temp.txt;done
  113  tree
  114  for i in {01..10} ; do echo "Hello Temp $i" > temp/temp_$i.txt;done
  115  tree
  116  cat temp/temp_01.txt
  117  ls
  118  git add . ; git commit -m "Add couple of temp files"
  119  git log
  120  git diff HEAD~1
  121  ls 
  122  git clean -f temp/*
  123  tree temp/
  124  mkdir tree2
  125  rm -rf tree2
  126  mkdir temp2
  127  ls 
  128  for i in {01..10} ; do echo "Hello Temp $i" > temp2/temp_$i.txt;done
  129  tree
  130  git clean -f temp2/*
  131  ls
  132  tree
  133  clear
  134  git config credential.helper store
  135  git clone https://github.com/jquery/jquery.git
  136  ls
  137  cd jquery/
  138  git log
  139  git log --online
  140  git log --oneline
  141  git log --oneline | WC -l
  142  git log --oneline | wc -l
  143  git log --oneline --graph
  144  git shortlog
  145  git shortlog -sne
  146  clear
  147  git log
  148  git status
  149  clear
  150  ls
  151  cd ..
  152  history
  153  clear
  154  ls
  155  clear
  156  git branch
  157  git branh prod
  158  git branchh prod
  159  git branch prod
  160  clear
  161  git branch
  162  git branch -d prod
  163  git branch
  164  cat .git/branches/
  165  cd .git/branches/
  166  ls
  167  cd ..
  168  ls
  169  cd ..
  170  ls
  171  git log
  172  git showhead
  173  git show Head
  174  git branch UAT
  175  ls
  176  hit checkout UAT
  177  git checkout UAT
  178  ls
  179  rm -rf temp*
  180  ls
  181  mkdir UAT
  182  echo "Ths is our UAT Branch" > UAT/hello.txt
  183  ls
  184  git branch
  185  git add .
  186  git status
  187  git commit -m "Initial Commit in UAT"
  188  git log
  189  git show HEAD
  190  git branch
  191  ls
  192  cd .git/
  193  ls
  194  cat HEAD
  195  cat branches
  196  cat branches/
  197  ls branches/
  198  ls
  199  cd ..
  200  ls
  201  git push
  202  git push --set-upstream origin UAT
  203  git config --list
  204  git branch
  205  git checkout main
  206  ls
  207  git log --oneline --graph
  208  git checkout UAT
  209  cat .git/HEAD 
  210  git checkout main
  211  clear
  212  ls
  213  mkdir main
  214  echo "this is our UAT Branch" > main/hello.txt
  215  git add ; git commit -m "Main" ; git push
  216  git add . ; git commit -m "Main" ; git push
  217  echo "this is our Main Branch" > main/hello.txt
  218  git add . ; git commit -m "Main" ; git push
  219  ls
  220  clear
  221  git checkout prod
  222  git branch prod
  223  git hcekout prod
  224  git chcekout prod
  225  git checkout prod
  226  mkdir prod
  227  echo "This is mu prod branch" > prod/hello.txt
  228  git add . ; git commit -m "Main" ; git push
  229  git push --set-upstream origin prod
  230  git add . ; git commit -m "Main" ; git push
  231  ls
  232  git branch
  233  git checkout main
  234  git branch
  235  git merge UAT
  236  git merge prod
  237  ls
  238  git log --graph
  239  clear
  240  git branch
  241  gt fetch
  242  git fetch
  243  l
  244  ls
  245  clear
  246  git status
  247  git puull
  248  git pull
  249  git logs
  250  git log
  251  cat testing_Git_pull
  252  git pull
  253  Y
  254  ls
  255  cat Tetsing_GIT_Pull 
  256  git fetch
  257  cat Tetsing_GIT_Pull 
  258  git pull
  259  cat Tetsing_GIT_Pull 
  260  clear
  261  git tag
  262  git tag release_v1
  263  git tag
  264  git push --tag
  265  rm -rf UAT prod/
  266  ls
  267  rm Tetsing_GIT_Pull 
  268  ls
  269  git add . ; git commit -m "New Development v2" ; git push
  270  git tag release_v2
  271  git push --tag
  272  ls
  273  history > Welcome_to_GIT > Day01-History.txt
